System:
You are a security expert in detecting Integer Overflow or Wraparound.
The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.
This is an example of vulnerable code:
----VULNERABLE CODE START-----
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

int add_nums(int num, int *nums)
{
    int sum = 0;
    int i = 1;

    while (sum < INT_MAX)
    {
        sum += nums[i];
        i++;
    }

    printf("Sum is %d\n", sum);
    printf("i is %d\n", i);

    return sum;
}
-----VULNERABLE CODE END-----

-----EXPLANATION OF VULNERABILITY-----
The user inputs a number of integers and they are added to another integer `sum` unless it becomes greater than `INT_MAX`. As `INT_MAX` is equal to the maximum value an integer can store, so if `sum` becomes greater than `INT_MAX` it will overflow and wrap around. This will make the while loop run for an infinite amount of iterations. The same will happen with integer `i`, it will also overflow if the loop runs `INT_MAX` times. So, the code is vulnerable to integer overflow. 
-----EXPLANATION END-----

This is an example of patched code:
-----PATCHED CODE 1 START-----
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

int add_nums(int num, int *nums)
{
    int sum = 0;
    int i = 1;

    while (sum > INT_MAX - nums[i] || i <= num)
    {
        sum += nums[i];
        i++;
    }

    printf("Sum is %d\n", sum);
    printf("i is %d\n", i);

    return 0;
}
-----PATCHED CODE 1 END-----

-----EXPLANATION OF PATCH-----
The user inputs a number of integers and they are added to another integer `sum` unless it becomes greater than `INT_MAX`. As `INT_MAX` is equal to the maximum value an integer can store, so if `sum` or `i` become greater than `INT_MAX` these will overflow and wrap around. To prevent that the while loop first checks if adding another integer crosses the `INT_MAX` limit of `sum` and `i` is less than the number of inputs given by the user, otherwise, it breaks the loop without adding another integer to it. So, the code is not vulnerable to integer overflow. 
-----EXPLANATION END-----


Give your answer in the following structure:
1. Vulnerability analysis: <YES, THERE IS A VULNERABILITY or NO, THERE IS NO VULNERABILITY>
2. Explanation: <Leave as N/A if there is no vulnerability>
| CWE Name: <Name of Vulnerability> |


User:
Please analyze the following code for Integer Overflow or Wraparound:

--------------- START OF CODE ---------------
GF_Err Q_DecCoordOnUnitSphere(GF_BifsDecoder *codec, GF_BitStream *bs, u32 NbBits, u32 NbComp, Fixed *m_ft)
{
	u32 i, orient, sign;
	s32 value;
	Fixed tang[4], delta;
	s32 dir;

	if (NbComp != 2 && NbComp != 3) return GF_BAD_PARAM;

	//only 2 or 3 comp in the quantized version
	dir = 1;
	if(NbComp == 2) dir -= 2 * gf_bs_read_int(bs, 1);
	orient = gf_bs_read_int(bs, 2);
	if ((orient==3) && (NbComp==2)) return GF_NON_COMPLIANT_BITSTREAM;
	for(i=0; i<NbComp; i++) {
		value = gf_bs_read_int(bs, NbBits) - (1 << (NbBits-1) );
		sign = (value >= 0) ? 1 : -1;
		m_ft[i] = sign * Q_InverseQuantize(0, 1, NbBits-1, sign*value);
	}
	delta = 1;
	for (i=0; i<NbComp; i++) {
		tang[i] = gf_tan(gf_mulfix(GF_PI/4, m_ft[i]) );
		delta += gf_mulfix(tang[i], tang[i]);
	}
	delta = gf_divfix(INT2FIX(dir), gf_sqrt(delta) );
	m_ft[orient] = delta;
	for (i=0; i<NbComp; i++) {
		m_ft[ (orient + i+1) % (NbComp+1) ] = gf_mulfix(tang[i], delta);
	}
	return GF_OK;
}
--------------- END OF CODE ---------------

Carefully analyze the given code snippet and track the data flows from various sources to sinks. Assume that any call to an unknown external API is unsanitized.
Let’s think step-by-step